<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="https://ananll.github.io/atom.xml" rel="self"/>
  
  <link href="https://ananll.github.io/"/>
  <updated>2021-08-29T03:31:45.643Z</updated>
  <id>https://ananll.github.io/</id>
  
  <author>
    <name>乐乐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git——版本控制工具</title>
    <link href="https://ananll.github.io/2021/08/28/Git%E2%80%94%E2%80%94%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    <id>https://ananll.github.io/2021/08/28/Git%E2%80%94%E2%80%94%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/</id>
    <published>2021-08-28T02:24:25.000Z</published>
    <updated>2021-08-29T03:31:45.643Z</updated>
    
    <content type="html"><![CDATA[<p>Git——开源的分布式版本控制工具</p><h1 id="常用的Linux命令"><a href="#常用的Linux命令" class="headerlink" title="常用的Linux命令"></a>常用的Linux命令</h1><p>cd: 改变目录<br>cd..: 回退到上一目录<br>pwd: 显示当前所在的目录路径<br>ls(ll): 列出当前目录的所有文件（ll更为详细）<br>touch: 新建一个文件<br>rm: 删除一个文件<br>mkdir: 新建一个文件夹<br>rm -r: 删除一个文件夹<br>mv: 移动文件<br>reset: 重新初始化终端、清屏<br>clear: 清屏<br>history: 查看历史命令<br>help: 帮助<br>exit: 退出<br>‘#: 表示注释</p><h1 id="Git基本理论"><a href="#Git基本理论" class="headerlink" title="Git基本理论"></a>Git基本理论</h1><h2 id="工作区域"><a href="#工作区域" class="headerlink" title="工作区域"></a>工作区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区（Stage/index）、资源库（Repository/Git Directory），若加上远程的git仓库（Remote Directory）则可分为四个工作区域。<img src="https://i.loli.net/2021/08/28/yKbwRd27O4hQGCi.png"><br>·Workspace：工作区，平时存放项目代码的地方<br>·Index/Stage：暂存区，用于临时存放改动（事实上，它只是一个文件，保存即将提交的文件列表信息）<br>·Repository：仓库区（本地仓库），安全存放数据的位置，里面有提交的所有的版本数据（HEAD指向最新放入的仓库的版本）<br>·Remote：远程仓库，托管代码的服务器，可简单认为是项目组中的一台电脑用于远程数据交换</p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>git工作流程一般如下：<br>1、在工作目录中添加、修改文件<br>2、将需要进行版本管理的文件放入暂存区域<br>3、将暂存区域的文件提交到git仓库<br>故，git管理的文件有三种状态：已修改（modified）、已暂存（staged）、已提交（committed）<img src="https://i.loli.net/2021/08/28/PWmHNSDQp2yCYnu.png"></p><h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><p><img src="https://i.loli.net/2021/08/28/Ee8GlJWPHAZYIqc.png"></p><h2 id="搭建本地仓库"><a href="#搭建本地仓库" class="headerlink" title="搭建本地仓库"></a>搭建本地仓库</h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库</p><h3 id="创建全新仓库"><a href="#创建全新仓库" class="headerlink" title="创建全新仓库"></a>创建全新仓库</h3><p>1、创建全新的仓库，需要用Git管理的项目的根目录执行：<br><code>git init</code><br>2、执行后可看到，在项目目录里多出了一个.git根目录，关于版本等的所有信息都在这个目录里</p><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><p>将远程服务器上的仓库完全镜像一份至本地<br><code>git clone [url]</code></p><h1 id="Git的基本操作命令"><a href="#Git的基本操作命令" class="headerlink" title="Git的基本操作命令"></a>Git的基本操作命令</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置身份(去掉名字和邮箱地址可查看是否配置成功)：<br><code>git config --global user.name &quot;&quot;</code><br><code>git config --global user.email &quot;&quot;</code><br>查看配置文件：<br><code>git config -l</code><br>查看系统的配置：<br><code>git config --system --list</code><br>查看当前用户的配置：<br><code>git config --global --list</code></p><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>部分文件我们不应该将其添加到版本控制当中，例数据库文件、临时文件等，我们可在主目录下建立”.gitignore”文件，其规则如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">*.txt     <span class="comment">#忽略所有.txt结尾的文件</span></span><br><span class="line">!lib.txt  <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp     <span class="comment">#忽略该文件夹下的temp文件</span></span><br><span class="line">build/    <span class="comment">#忽略build目录下所有的文件</span></span><br><span class="line">doc/*.txt <span class="comment">#忽略doc文件夹下的.txt文件</span></span><br></pre></td></tr></table></figure><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><p>添加所有文件到暂存区：<br><code>git add .</code><br>提交暂存区的内容到本地仓库<br><code>git commit -m &quot;提交信息&quot;</code></p><h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p>查看所有文件状态：<br><code>git status</code><br>查看指定文件状态：<br><code>git status [filename]</code><br>查看所有更改内容：<br><code>git diff</code><br>查看指定文件更改内容：<br><code>git diff [filename]</code></p><h2 id="撤销未提交的修改"><a href="#撤销未提交的修改" class="headerlink" title="撤销未提交的修改"></a>撤销未提交的修改</h2><p>撤销还没执行过add命令的文件：<br><code>git checkout [filename]</code><br>撤销执行过add命令的文件，先取消添加，再撤回提交：<br><code>git reset []</code><br><code>git checkout []</code></p><h2 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h2><p>查看历史提交信息：<br> <code>git log</code><br>查看其中一条信息：<br><code>git log id -1</code><br>查看信息的具体修改内容：<br><code>git log id -1 -p</code></p><h2 id="git-分支中常用命令"><a href="#git-分支中常用命令" class="headerlink" title="git 分支中常用命令"></a>git 分支中常用命令</h2><p>列出本地所有分支：<br><code>git branch</code></p><p>列出远程所有分支：<br><code>git branch -r</code></p><p>新建一个分支，但仍然停留在当前分支：<br><code>git branch [branch-name]</code></p><p>新建一个分支，并切换到该分支：<br><code>git checkout -b [branch]</code></p><p>合并指定分支到当前分支：<br><code>git merge [branch]</code></p><p>删除分支：<br>`git branch -d [branch-name]</p><p>删除远程分支：<br><code>git push origin --delete [branch-name]</code><br><code>git branch -dr [remote/branch]</code></p><p>点击了解更多<a class="link"   href="https://gitee.com/all-about-git" >详情<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Git——开源的分布式版本控制工具&lt;/p&gt;
&lt;h1 id=&quot;常用的Linux命令&quot;&gt;&lt;a href=&quot;#常用的Linux命令&quot; class=&quot;headerlink&quot; title=&quot;常用的Linux命令&quot;&gt;&lt;/a&gt;常用的Linux命令&lt;/h1&gt;&lt;p&gt;cd: 改变目录&lt;br&gt;c</summary>
      
    
    
    
    <category term="Android" scheme="https://ananll.github.io/categories/Android/"/>
    
    
    <category term="Git" scheme="https://ananll.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>浅谈广播机制</title>
    <link href="https://ananll.github.io/2021/08/13/%E6%B5%85%E8%B0%88%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6/"/>
    <id>https://ananll.github.io/2021/08/13/%E6%B5%85%E8%B0%88%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6/</id>
    <published>2021-08-13T15:10:44.000Z</published>
    <updated>2021-08-28T04:07:21.437Z</updated>
    
    <content type="html"><![CDATA[<p>我们在平时的学习和日常生活中都接触过广播，通常用来发送一些重要的通知，类似的广播机制其实在计算机领域也得到了广泛的应用，在经过大致的学习后，进行小小的概括总结。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>广播主要分为两种类型：标准广播和有序广播。</p><h2 id="标准广播"><a href="#标准广播" class="headerlink" title="标准广播"></a>标准广播</h2><p>标准广播是一种完全异步执行的广播，即在广播发出之后，所有的广播接收器几乎都会在同一时间接收到这条广播。</p><p>特点：1、不存在先后顺序。  2、效率较高。  3、无法被截断。</p><h2 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h2><p>有序广播是一种同步执行的广播，即在广播发出之后，同一时间只会有一个广播接收器能收到这条广播，只有当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。</p><p>特点：1、有先后顺序。  2、前面的广播接收器可以截断正在传递的广播。</p><h1 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h1><p>系统广播：比如开机完成后，电量不足是发出的广播等等，想要接收到这些广播，则需要使用广播接收器。</p><p>广播的注册方式一般有两种：动态注册（在代码中注册）和静态注册（在AndroidMainifest.xml中注册）。</p><h2 id="动态注册监听网络变化"><a href="#动态注册监听网络变化" class="headerlink" title="动态注册监听网络变化"></a>动态注册监听网络变化</h2><p>优点：可以对广播实现自由地控制注册与取消</p><p>如何创建广播接收器？————新建一个类，让其继承自BroadcastReceiver，并重写父类的onReceive（）方法即可。</p><p>注：<br>1、动态注册的广播接收器必须要取消注册，我们可以在onDestroy（）方法中通过调用unregisterReceiver（）方法来实现<br>2、若程序需要进行一些敏感操作，必须在配置文件中声明权限！如若访问系统网络状态，则需在AndroidMainfest.xml文件加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h2 id="静态注册实现开机启动"><a href="#静态注册实现开机启动" class="headerlink" title="静态注册实现开机启动"></a>静态注册实现开机启动</h2><p>优点：可以实现在程序未启动的情况下就接收到广播。</p><p>使用Android Studio提供的快捷方式来创建一个广播接收器。</p><p>注：<br>1、静态的广播接收器一定要在AndroidMainfest.xml文件中注册才可以（用快捷方式创建时已自动完成注册）。<br>2、声明权限，监听系统开机广播，需要加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>3、需要在<intent-filter>标签里添加相应的action。此处添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;intent-filter android:priority=<span class="string">&quot;100&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;action android:name=<span class="string">&quot;android:name=&quot;</span>android.intent.action.BOOT_COMPLETED<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure><p>4、不要在onReceive（）方法中添加过多的逻辑或者进行任何的耗时操作，因为在广播接收器中是不允许开启线程的。</p><h1 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h1><h2 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h2><p>1、定义一个广播接收器来准备进行接受此广播。<br>2、在AndroidMainfest.xml中对广播接收器进行修改。<br>3、在activity_main.xml布局文件中添加button作为广播触发点。<br>4、在MainActivity中给按钮的点击事件加入发送自定义广播的逻辑（通过Intent来进行广播传递则可传递一些数据给广播接收器）。</p><h2 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h2><p>1、新建一个项目，并新建一个另一个广播接收器（用于接收上面的自定义广播），在AndroidMainfest.xml文件中对其进行修改。<br>2、回到前一个项目，修改MainActivity中sendBroadcast（）方法为sendOrderdBroadcast（）方法。<br>3、在AndroidMainfest.xml文件中 通过android：priority属性给广播接收器设置优先级（高的先接受广播）。<br>4、在onReceive（）方法中调用abortBroadcast（）方法则可将本条广播截断，则之后的广播接收器无法收到此广播。</p><h1 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h1><p>优点：安全高效，避免携带关键性数据的广播被其他应用程序截取或其他应用程序向我们不断发送垃圾广播。</p><p>方法：使用LocalBroadcastManager对广播进行管理，并提供发送广播和注册广播接收器的方法。</p><p>注：本地广播无法通过静态注册的方式来接收。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们在平时的学习和日常生活中都接触过广播，通常用来发送一些重要的通知，类似的广播机制其实在计算机领域也得到了广泛的应用，在经过大致的学习后，进行小小的概括总结。&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Android" scheme="https://ananll.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>超好吃的鸡蛋煎饼果子！！</title>
    <link href="https://ananll.github.io/2021/08/13/EggStuffedPancake/"/>
    <id>https://ananll.github.io/2021/08/13/EggStuffedPancake/</id>
    <published>2021-08-13T09:44:15.000Z</published>
    <updated>2021-08-26T17:52:45.402Z</updated>
    
    <content type="html"><![CDATA[<p>加花生香菜鸡蛋热乎乎的煎饼果子怎么养成呐？来跟着我一起搞起来吧。</p><p><img src="https://yqfile.alicdn.com/0b11334f83b044d7b91d0f478047c3e46ebae370.png"></p><h1 id="请跟我这样做哈"><a href="#请跟我这样做哈" class="headerlink" title="请跟我这样做哈"></a>请跟我这样做哈</h1><h2 id="准备食材"><a href="#准备食材" class="headerlink" title="准备食材"></a>准备食材</h2><p>·面糊 300g<br>·生菜 若干<br>·火腿肠 n<br>·香菜 适量<br>·酱油 一勺<br>·花生 适量<br>·鸡蛋 俩（一个不够吃吧hhh）<br>准备好啦，开始做喽。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1、 和面粉（干了就加水，尽量稠一点）。</p><p>2、 锅烧热（别整冒烟了），俩勺面糊快速摊开在平底锅，搞成薄饼（最好不要放油哦，要是粘锅的话，抹薄薄一层就可）。</p><p>3、 烙好一面把饼翻过来，打上我们的两个蛋，等鸡蛋稍稍凝固好了再翻过来（这时可以在这边涂上喜欢的酱呐）。</p><p>4、 煎好后，将准备好的花生、香菜等等等都放到里面。</p><p>5、 一边对折，卷的好好的（别给整掉了hhh）</p><p>6、 大功告成！</p><h1 id="做煎饼果子的N种方式"><a href="#做煎饼果子的N种方式" class="headerlink" title="做煎饼果子的N种方式"></a>做煎饼果子的N种方式</h1><h2 id="制作步骤回顾"><a href="#制作步骤回顾" class="headerlink" title="制作步骤回顾:"></a>制作步骤回顾:</h2><p>从上面的图解中我们可以看到，流程是这样的：</p><p>1、面粉 + 水 -&gt; 面浆；面浆 + 烘焙 -&gt; 煎饼<br>2、煎饼 + 鸡蛋 + 烘焙 -&gt; 鸡蛋煎饼<br>3、鸡蛋煎饼 + 生菜 -&gt; 带有生菜的鸡蛋煎饼<br>4、带有生菜的鸡蛋煎饼 + 火腿肠 -&gt; 带有生菜和火腿肠的鸡蛋煎饼<br>5、带有生菜和火腿肠的鸡蛋煎饼 + 卷曲 + 切断 -&gt; 煎饼果子</p><p>我们对上面的步骤进行化简：</p><p>1、面粉 -&gt; 煎饼<br>2、煎饼 + 鸡蛋 -&gt; 鸡蛋煎饼<br>3、鸡蛋煎饼 + 生菜 + 火腿肠 -&gt; 煎饼果子</p><p>我们对上面的步骤继续化简：</p><p>面粉 -&gt; 煎饼 -&gt; 鸡蛋 -&gt; 鸡蛋煎饼 -&gt; 生菜 -&gt; 火腿肠 -&gt; 煎饼果子</p><p>下面让我们使用代码先来模拟下，验证怎么样才可以高效的做出煎饼果子吧。</p><h2 id="N种方式"><a href="#N种方式" class="headerlink" title="N种方式"></a>N种方式</h2><p><a class="link"   href="https://developer.aliyun.com/article/444063" >原文链接<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;加花生香菜鸡蛋热乎乎的煎饼果子怎么养成呐？来跟着我一起搞起来吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://yqfile.alicdn.com/0b11334f83b044d7b91d0f478047c3e46ebae370.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;请跟</summary>
      
    
    
    
    <category term="代码？" scheme="https://ananll.github.io/categories/%E4%BB%A3%E7%A0%81%EF%BC%9F/"/>
    
    
    <category term="生活" scheme="https://ananll.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>。。？</title>
    <link href="https://ananll.github.io/2021/08/13/%EF%BC%9F%EF%BC%9F%EF%BC%9F/"/>
    <id>https://ananll.github.io/2021/08/13/%EF%BC%9F%EF%BC%9F%EF%BC%9F/</id>
    <published>2021-08-13T09:44:15.000Z</published>
    <updated>2021-08-26T15:53:31.064Z</updated>
    
    <content type="html"><![CDATA[<p>致自己部署Hexo踩过的坑 </p><h1 id="node版本太高"><a href="#node版本太高" class="headerlink" title="node版本太高"></a>node版本太高</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(node:26356) Warning: Accessing non-existent property <span class="string">&#x27;lineno&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show <span class="built_in">where</span> the warning was created)</span><br><span class="line">(node:26356) Warning: Accessing non-existent property <span class="string">&#x27;column&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:26356) Warning: Accessing non-existent property <span class="string">&#x27;filename&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:26356) Warning: Accessing non-existent property <span class="string">&#x27;lineno&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:26356) Warning: Accessing non-existent property <span class="string">&#x27;column&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:26356) Warning: Accessing non-existent property <span class="string">&#x27;filename&#x27;</span> of module exports inside circular dependency</span><br></pre></td></tr></table></figure><p>解决办法：切换成低版本的node来安装Hexo</p><p>一、先清空本地安装的node.js版本（彻底删除）</p><p>二、安装nvm管理工具<br>1、从<a class="link"   href="https://github.com/coreybutler/nvm-windows/releases" >官网<i class="fas fa-external-link-alt"></i></a>下载安装包。</p><p>2、将下载下的压缩包进行解压。</p><p>3、进行nvm安装，安装完成后，检验是否安装成功，输入命令nvm v查看，若出现版本号，则安装成功。</p><p>三、安装node.js版本<br>1、输入命令nvm list available查看可用的版本号。</p><p>2、输入命令nvm install node版本号(例如：nvm install 14.17.5)即可安装对应版本与对应的npm版本，安装完成后，分别输入命令node -v和npm -v检验node.js与对应的npm是否安装成功，若出现版本号，则安装成功。</p><p>3、输入命令nvm list可查看所安装的所有node.js版本号以及当前所选的运行版本。</p><p>4、输入命令nvm use node版本号（例如：nvm use 14.17.5）即可选择本地所使用的node.js版本，该命令可根据自己的需要，随意切换node.js版本运行。</p><p>5、若想删除某node.js版本的话，输入命令nvm uninstall node版本号（例如：nvm uninstall 12.22.04）即可删除对应版本</p><h1 id="缺少冒号？✘————空格！"><a href="#缺少冒号？✘————空格！" class="headerlink" title="缺少冒号？✘————空格！"></a>缺少冒号？✘————空格！</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err: YAMLException: can not <span class="built_in">read</span> an implicit mapping pair; a colon is missed (42:47)</span><br></pre></td></tr></table></figure><p>原因：格式出错了！冒号后没有空格导致没有成功映射。</p><p>解决办法：在对应的冒号后加空格（冒号后一定要加！）。</p><h1 id="使用Gitalk插件出现未找到相关的issues进行评论"><a href="#使用Gitalk插件出现未找到相关的issues进行评论" class="headerlink" title="使用Gitalk插件出现未找到相关的issues进行评论"></a>使用Gitalk插件出现未找到相关的issues进行评论</h1><p>原因：未给文章评论初始化，只需要登录 GitHub 账户即可（就这？）。</p><h1 id="缺少空格"><a href="#缺少空格" class="headerlink" title="缺少空格"></a>缺少空格</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err: YAMLException: can not <span class="built_in">read</span> a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</span><br></pre></td></tr></table></figure><p>原因：报错信息是提示hexo的yml配置文件，冒号后面少了空格。</p><p>解决方案：到提示行将对应的空格补上即可。</p><h1 id="bash-hexo-command-not-found-报错"><a href="#bash-hexo-command-not-found-报错" class="headerlink" title="bash: hexo: command not found 报错"></a>bash: hexo: command not found 报错</h1><p>背景：好几天没动过Hexo博客，今天准备更新的时候突然报错bash: hexo: command not found，搞的本人一脸懵，原先不是好好的，想想可能是处理node版本太高更新或删掉什么东西了。</p><p>解决办法（查的）：首先检查node.js和npm是否正常，依次输入命令node -v和npm -v看看是否有相关的版本信息<img src="https://i.loli.net/2021/08/26/lBYR8oMrSqAxp29.png"></p><p>出现了版本信息就证明 node.js 和 npm 是没有问题的，那么极有可能是环境变量的配置问题了。</p><p>我们找到本地博客目录下node_modules文件夹，将 node_modules 下的 .bin 文件路径复制下来添加到环境变量中。</p><p>环境变量配好之后，重新打开git执行hexo命令，即可运行，如果此时仍然无法执行 hexo 命令，运行命令 npm install hexo-cli -g ，重新安装 hexo。</p><h1 id="如何获取图片的url地址？"><a href="#如何获取图片的url地址？" class="headerlink" title="如何获取图片的url地址？"></a>如何获取图片的url地址？</h1><p><a class="link"   href="https://www.cnblogs.com/HL-space/p/10893613.html" >方法链接<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;致自己部署Hexo踩过的坑 &lt;/p&gt;
&lt;h1 id=&quot;node版本太高&quot;&gt;&lt;a href=&quot;#node版本太高&quot; class=&quot;headerlink&quot; title=&quot;node版本太高&quot;&gt;&lt;/a&gt;node版本太高&lt;/h1&gt;&lt;figure class=&quot;highlight ba</summary>
      
    
    
    
    <category term="报错" scheme="https://ananll.github.io/categories/%E6%8A%A5%E9%94%99/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ananll.github.io/2021/08/12/hello-world/"/>
    <id>https://ananll.github.io/2021/08/12/hello-world/</id>
    <published>2021-08-12T12:50:53.763Z</published>
    <updated>1985-10-26T08:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
